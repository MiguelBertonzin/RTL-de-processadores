library IEEE; use ieee.std_logic_unsigned.all; 
use IEEE.std_logic_1164.all; 
 
entity bit_adder is port ( i_in  : in  std_logic_vector (15 downto 0);        o_out : out std_logic_vector (15 downto 0)); end bit_adder; 
 
architecture arch_1 of bit_adder is   begin 
 
o_out <= i_in + 1; 
 
end arch_1; 





CÃ³digo do datapath: 


library IEEE; 
use IEEE.std_logic_1164.all; 
 
entity datapath is 
port (  i_CLK      : in  std_logic;         i_Dreg_clr : in  std_logic;         i_Dreg_ld  : in  std_logic;         i_Dctr_clr : in  std_logic;         i_Dctr_ld  : in  std_logic; 
        o_D        : out std_logic_vector (15 downto 0)); end datapath; 
 
architecture arch_1 of datapath is ---- processo de registro ---- component register_16bit 
    port (i_CLK      : in std_logic; 
 	     	 i_Dctr_clr : in std_logic;  	     	 i_Dctr_ld  : in std_logic;  	     	 i_in       : in std_logic_vector (15 downto 0);  	     	 o_out      : out std_logic_vector (15 downto 0)); end component; 
 
component bit_adder 
    port ( i_in  : in  std_logic_vector (15 downto 0);            o_out : out std_logic_vector (15 downto 0)); end component; 
 
component shift_r 
    port (  i_in  : in  std_logic_vector (15 downto 0); 
            o_out : out std_logic_vector (15 downto 0)); end component; 
 
signal w_adder    : std_logic_vector(15 downto 0); signal w_register : std_logic_vector(15 downto 0); signal w_shiftr1  : std_logic_vector(15 downto 0); 
 
begin 
 
    u_0 : bit_adder port map (  i_in  => w_register,                                 o_out => w_adder); 
 
    u_1 : register_16bit port map ( i_CLK      => i_CLK, 
 	 	 	 	 	 	 	 	 	 	  	i_Dctr_clr => i_Dctr_clr, 
 	 	 	 	 	 	 	 	 	 	  	i_Dctr_ld  => i_Dctr_ld, 
 	 	 	 	 	 	 	 	 	 	  	i_in       => w_adder, 
 	 	 	 	 	 	 	 	 	 	  	o_out      => w_register); 
 
    u_2 : shift_r port map ( i_in  => w_register,                              o_out => w_shiftr1); 
 
    u_3 : register_16bit port map ( i_CLK      => i_CLK, 
 	 	 	 	 	 	 	 	 	 	  	i_Dctr_clr => i_Dreg_clr, 
 	 	 	 	 	 	 	 	 	 	  	i_Dctr_ld  => i_Dreg_ld, 
 	 	 	 	 	 	 	 	 	 	  	i_in       => w_shiftr1, 
 	 	 	 	 	 	 	 	 	 	  	o_out      => o_D); 
 
end arch_1; 

